{"version":3,"sources":["../main.js"],"names":["parse","traverse","NodePath","isImportDefaultSpecifier","classMethod","blockStatement","isClassMethod","isClassProperty","Identifier","expressionStatement","ClassMethod","generate","codeFrame","codeText","astTree","sourceType","plugins","decoratorsBeforeExport","console","log","ImportDeclaration","path","node","specifiers","forEach","specifier","errorMsg","testText","loc","start","line","local","end","column","highlightCode","source","value"],"mappings":"AAAA,SAASA,KAAT,QAAsB,eAAtB;AACA,OAAOC,QAAP,IAAmBC,QAAnB,QAAmC,iBAAnC;AACA,SACEC,wBADF,EAEEC,WAFF,EAGEC,cAHF,EAIEC,aAJF,EAKEC,eALF,EAMEC,UANF,EAOEC,mBAPF,EAQEC,WARF,QASO,cATP;AAUA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AAEA,IAAIC,QAAQ,mUAAZ;AAwBA,MAAMC,OAAO,GAAGd,KAAK,CAACa,QAAD,EAAW;AAC9BE,EAAAA,UAAU,EAAE,QADkB;AAE9BC,EAAAA,OAAO,EAAE,CACP,YADO,EAEP,CAAC,YAAD,EAAe;AAAEC,IAAAA,sBAAsB,EAAE;AAA1B,GAAf,CAFO,EAGP,iBAHO,EAIP,wBAJO;AAFqB,CAAX,CAArB;AAUAC,OAAO,CAACC,GAAR,CAAYL,OAAZ;AAEAb,QAAQ,CAACa,OAAD,EAAU;AAChBM,EAAAA,iBAAiB,EAAE,UAACC,IAAD,EAAU;AAC3BA,IAAAA,IAAI,CAACC,IAAL,CAAUC,UAAV,CAAqBC,OAArB,CAA6B,UAACC,SAAD,EAAe;AAC1C,UAAItB,wBAAwB,CAACsB,SAAD,CAA5B,EAAyC;AACvCP,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,cAAMO,QAAQ,GAAGd,SAAS,CACxBe,QADwB,EAExBN,IAAI,CAACC,IAAL,CAAUM,GAAV,CAAcC,KAAd,CAAoBC,IAFI,EAGxBL,SAAS,CAACM,KAAV,CAAgBH,GAAhB,CAAoBI,GAApB,CAAwBC,MAHA,EAIxB;AACEC,UAAAA,aAAa,EAAE;AADjB,SAJwB,CAA1B;AAQAhB,QAAAA,OAAO,CAACC,GAAR,CAAYO,QAAZ;AACD;AACF,KAbD;AAcAR,IAAAA,OAAO,CAACC,GAAR,CAAYE,IAAI,CAACC,IAAL,CAAUa,MAAV,CAAiBC,KAA7B;AACD;AAjBe,CAAV,CAAR,C,CAoBA;AAEA;AACA;AACA;AAEA","sourcesContent":["import { parse } from '@babel/parser';\r\nimport traverse, { NodePath } from '@babel/traverse';\r\nimport {\r\n  isImportDefaultSpecifier,\r\n  classMethod,\r\n  blockStatement,\r\n  isClassMethod,\r\n  isClassProperty,\r\n  Identifier,\r\n  expressionStatement,\r\n  ClassMethod,\r\n} from '@babel/types';\r\nimport generate from '@babel/generator';\r\nimport codeFrame from '@babel/code-frame';\r\n\r\nlet codeText = `\r\nimport fs from 'fs'\r\n\r\n@testDecorators()\r\nexport class Index {\r\n  a: number\r\n  private b: number = 1\r\n  constructor (a: number) {\r\n    this.a = a\r\n  }\r\n  private sum (): number {\r\n    return this.a + this.b\r\n  }\r\n\r\n  getB (): number {\r\n    return this.b\r\n  }\r\n\r\n  getSum (): number {\r\n    return this.sum()\r\n  }\r\n}\r\n`;\r\n\r\nconst astTree = parse(codeText, {\r\n  sourceType: 'module',\r\n  plugins: [\r\n    'typescript',\r\n    ['decorators', { decoratorsBeforeExport: true }],\r\n    'classProperties',\r\n    'classPrivateProperties',\r\n  ],\r\n});\r\n\r\nconsole.log(astTree);\r\n\r\ntraverse(astTree, {\r\n  ImportDeclaration: (path) => {\r\n    path.node.specifiers.forEach((specifier) => {\r\n      if (isImportDefaultSpecifier(specifier)) {\r\n        console.log('禁止使用默认导入');\r\n        const errorMsg = codeFrame(\r\n          testText,\r\n          path.node.loc.start.line,\r\n          specifier.local.loc.end.column,\r\n          {\r\n            highlightCode: true,\r\n          }\r\n        );\r\n        console.log(errorMsg);\r\n      }\r\n    });\r\n    console.log(path.node.source.value);\r\n  },\r\n});\r\n\r\n// import * as babylon from \"babylon\";\r\n\r\n// const code = `function square(n) {\r\n//   return n * n;\r\n// }`;\r\n\r\n// babylon.parse(code);\r\n"],"file":"main.mjs"}